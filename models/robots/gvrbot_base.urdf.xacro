<?xml version="1.0"?>

<robot name="gvr_base"
    xmlns:xacro="http://www.ros.org/wiki/xacro"
    xmlns:interface="http://www.ros.org/wiki/xacro/#interface">
    
    <xacro:include filename="$(find gvrbot)/models/robots/inertial_tensors.urdf.xacro" />
    <xacro:include filename="$(find gvrbot)/models/robots/single_wheel.urdf.xacro" />
    
    <!-- Properties (Constants) -->
    <xacro:property name="PI" value="3.1415926535897931" />
    
    <xacro:property name="base_size_x" value="0.680" />
    <xacro:property name="base_size_y" value="0.42" />
    <xacro:property name="base_size_z" value="0.178" />
    <xacro:property name="base_mass" value="10.89" />
    
    <xacro:property name="wheel_radius_big" value="0.085" />
    <xacro:property name="wheel_size_y" value="0.0825" />
    <xacro:property name="wheel_mass" value="0.1" />

    <xacro:property name="wheel_offset_z_from_base_link" value="-${wheel_radius_big}" />
    
    <material name="army_green"><color rgba="${42/255} ${46/255} ${18/255} 1.0"/></material>
    
    <xacro:macro name="gvr_base_macro">
    
        <!-- Links and Joints (i.e., the robot) 
        <link name="base_footprint"/>
        <joint name="bf_to_bl" type="fixed">
          <origin xyz="0.0 0.0 -${base_size_z * 2}" rpy="0.0 0.0 0.0" />
          <parent link="base_link"/>
          <child link="base_footprint"/>
        </joint>
        -->
        <link name="base_link"></link>
        <joint name="base_link_joint" type="fixed">
            <origin xyz="0 0 0" rpy="0 0 0" />
            <parent link="base_link"/>
            <child link="chassis_link" />
        </joint>
        
        <link name="imu_link"/>
        <joint name="imu_to_bl" type="fixed">
          <origin xyz="0.0 0.0 0.0" rpy="0.0 0.0 0.0" />
          <parent link="base_link"/>
          <child link="imu_link"/>
        </joint>
             
        <link name="chassis_link">
            <inertial>
                <mass value="${base_mass}" />
                <origin xyz="${-base_size_x/2} 0 ${base_size_z/2 + 0.05}" rpy="0 0 0" />
                <xacro:box_inertia x="${base_size_x}" y="${base_size_y}" z="${base_size_z}" mass="${base_mass}" />
            </inertial>
            <!-- compare the two visual pieces until they match up in size then delete the mesh -->
            <visual>
                <origin xyz="0 0 0" rpy="0 0 ${PI/2}" />
                <geometry>
                    <mesh filename="package://gvrbot/models/meshes/gvrbot_base.STL"/>
                </geometry>
                <material name="army_green"/>
            </visual>
            <!--visual>
                <origin xyz="0.0 0.0 -0.085" rpy="0 0 0" />
                <geometry>
                    <box size="${base_size_x} ${base_size_y} ${base_size_z}" />
                </geometry>
                <Green />
            </visual-->

            <collision>
                <origin xyz="0 0 0" rpy="0 0 ${PI/2}" />
                <geometry>
                    <mesh filename="package://gvrbot/models/meshes/gvrbot_base.STL"/>
                </geometry>
            </collision>
        </link>

        <xacro:property name="wheelbase" value="0.50" />
        <xacro:property name="track" value="0.33" />
        <xacro:property name="wheel_vertical_offset" value="-0.09" />
        <xacro:property name="wheel_radius" value="0.15" />  
        <xacro:property name="wheel_width" value="0.040" />
       <!-- 
        <xacro:wheel prefix="front_left">
            <origin xyz="${wheelbase/2-0.03} ${track/2} ${wheel_vertical_offset}" rpy="0 0 0" />
        </xacro:wheel>
        <xacro:wheel prefix="front_right">
            <origin xyz="${wheelbase/2-0.03} ${-track/2} ${wheel_vertical_offset}" rpy="0 0 0" />
        </xacro:wheel>
        <xacro:wheel prefix="rear_left">
            <origin xyz="${-wheelbase/2-0.03} ${track/2} ${wheel_vertical_offset}" rpy="0 0 0" />
        </xacro:wheel>
        <xacro:wheel prefix="rear_right">
            <origin xyz="${-wheelbase/2-0.03} ${-track/2} ${wheel_vertical_offset}" rpy="0 0 0" />
        </xacro:wheel>

        <gazebo>
            <plugin name="gazebo_ros_control" filename="libgazebo_ros_control.so">
                <robotNamespace>/</robotNamespace>
                <legacyModeNS>true</legacyModeNS>
            </plugin>
            <plugin name="p3d_base_controller" filename="libgazebo_ros_p3d.so">
                <alwaysOn>true</alwaysOn>
                <updateRate>50.0</updateRate>
                <bodyName>base_link</bodyName>
                <topicName>/gvrbot/ground_truth/state</topicName>
                <gaussianNoise>0.01</gaussianNoise>
                <frameName>world</frameName>
                <xyzOffsets>0 0 0</xyzOffsets>
                <rpyOffsets>0 0 0</rpyOffsets>
            </plugin> 
            <plugin name="imu_controller" filename="libhector_gazebo_ros_imu.so">
                <robotNamespace>/</robotNamespace>
                <alwaysOn>true</alwaysOn>
                <updateRate>50.0</updateRate>
                <bodyName>base_link</bodyName>          
                <topicName>/imu/data</topicName>
                <accelDrift>0.005 0.005 0.005</accelDrift>
                <accelGaussianNoise>0.005 0.005 0.005</accelGaussianNoise>
                <rateDrift>0.005 0.005 0.005 </rateDrift>
                <rateGaussianNoise>0.005 0.005 0.005 </rateGaussianNoise>
                <headingDrift>0.005</headingDrift>
                <headingGaussianNoise>0.005</headingGaussianNoise>
                <xyzOffset>0 0 0</xyzOffset>
                <rpyOffset>0 0 0</rpyOffset>          
            </plugin>      
        </gazebo>
                -->
    </xacro:macro>
</robot>
